env:
  VERSION: "latest"
  REGISTRY_BASE_URL: "docker.pkg.github.com"
  REGISTRY: "docker.pkg.github.com/gummiees/shop-tailwind"
  DOCKERFILE_CD: "Dockerfile.cd"
  CI_IMAGE_NAME: "angular-ci"
  CD_IMAGE_NAME: "angular-cd"
  CI_CONTAINER_NAME: "ci-container"
  CD_CONTAINER_NAME: "cd-container"

on:
  pull_request:
    types: [opened, closed, synchronize, reopened, edited]
    branches: ["*"]
  release:
    types:
      - created

jobs:
  ci-cd:
    #if: github.event.pull_request.merged == true
    name: CI/CD workflow
    runs-on: ubuntu-latest
    steps:
    - name: Checkout main
      uses: actions/checkout@v2
      
    - name: Build the CI image
      run: docker build -t $(echo $CI_IMAGE_NAME) .
      
    - name: Run the CI image on a container, and run the tests on it
      run: docker run -d --name $(echo $CI_CONTAINER_NAME) $(echo $CI_IMAGE_NAME):latest
      
    - name: Build the image
      run: docker build -f $(echo $DOCKERFILE_CD) -t $(echo $CD_IMAGE_NAME) .

    - name: Push the image to GitHub Packages
      run: |
        echo Tag image
        docker tag $(echo $CD_IMAGE_NAME):latest $(echo $REGISTRY)/$(echo $CD_IMAGE_NAME):$(echo $VERSION)
        echo Login into GitHub container
        docker login $(echo $REGISTRY_BASE_URL) -u ${{ github.repository_owner }} -p ${{ secrets.GH_TOKEN }}
        echo Push image
        docker push $(echo $REGISTRY)/$(echo $CD_IMAGE_NAME):$(echo $VERSION)

    - name: Deploy to Digital Ocean droplet via SSH action
      uses: appleboy/ssh-action@v0.1.3
      with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSHKEY }}
          passphrase : ${{ secrets.PASSPHRASE }}
          envs: CD_IMAGE_NAME,CD_CONTAINER_NAME,REGISTRY,REGISTRY_BASE_URL,VERSION
          script: |
            echo Stop running container
            docker stop $(echo $CD_CONTAINER_NAME)
            echo Remove old container
            docker rm -f $(echo $CD_CONTAINER_NAME)
            echo Login into GitHub Registry
            docker login $(echo $REGISTRY_BASE_URL) -u ${{ github.repository_owner }} -p ${{ secrets.GH_TOKEN }}
            echo Run a new container from the pulled image
            docker run -d --restart always -p 80:80 --name $(echo $CD_CONTAINER_NAME) $(echo $REGISTRY)/$(echo $CD_IMAGE_NAME):$(echo $VERSION)